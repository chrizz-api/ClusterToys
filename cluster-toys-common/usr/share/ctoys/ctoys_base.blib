#!/bin/bash
# cbase.lib - bash support functions for cluster toys
#
# Version 1.0.3
#
# history:
#
# 04-07-2015 - added versioning
#
# 07-25-2014 - added tool check
#              added new colors
#              added config introspection
#              added trim function
#
# 07-24-2014 - initial code
#
## functions:
#
#   ct_activate_colors [1/0]
#   ct_check_tool "toolID" [Required]
#   ct_debug "debug message" [debug level]
#   ct_error "error message"
#   ct_exec "execute string"
#   ct_info "info text"
#   ct_log "log message" ["log scope"]
#   ct_settings
#   ct_trim "string to trim"
#   ct_verbose "verbose message"
#   ct_version
#   ct_warn "warning message"
#
## usage:
#
# ## include ctoys_base.lib
#
# if [ -f "/usr/share/ctoys/ctoys_base.lib" ] ; then
#  source "/usr/share/ctoys/ctoys_base.lib"
# else
#  echo "ctoys_base.lib not found please install"
#  exit 1
# fi
#
# ## configure ctoys_base.lib
#
# CT_DEBUG=0
# CT_VERBOSE=0
# CT_TEST=0
# CT_LOGGING=0
# CT_FORCE=0
# CT_SILENT=0
# CT_LOGFILE="/dev/null"
# CT_LOG_DEFAULT_SCOPE="ctoys"
#
# ## quick and dirty debug switch
#
# if [ "$1" = "-D" ] ; then
#  CT_DEBUG=1
#  if [[ -n "$2" && "${2::1}" != "-" ]] ; then
#   CT_DEBUG=$2
#  fi
# fi
#
##################################

# debian tool definitions

declare -A CTT

CTT['CAT']='/bin/cat'
#CTT['CD']='cd'
CTT['CHOWN']='/bin/chown'
CTT['CP']='/bin/cp'
CTT['CURL']='/usr/bin/curl'
CTT['CUT']='/usr/bin/cut'
#CTT['ECHO']='/bin/echo'
CTT['DATE']='/bin/date'
CTT['DPKG']='/usr/bin/dpkg'
CTT['FAKEROOT']='/usr/bin/fakeroot'
CTT['ID']='/usr/bin/id'
CTT['MD5SUM']='/usr/bin/md5sum'
CTT['MKDIR']='/bin/mkdir'
CTT['MV']='/bin/mv'
CTT['LOGGER']='/usr/bin/logger'
CTT['REPREPRO']='/usr/bin/reprepro'
CTT['RSYNC']='/usr/bin/rsync'
CTT['RM']='/bin/rm'
CTT['SED']='/bin/sed'
CTT['SSH']='/usr/bin/ssh'
CTT['SH']='/bin/sh'
CTT['SU']='/bin/su'
CTT['TAR']='/bin/tar'
CTT['TEMPFILE']='/bin/tempfile'
CTT['TOUCH']='/usr/bin/touch'
CTT['WGET']='/usr/bin/wget'

# control variables

CT_DEBUG=0
CT_VERBOSE=0
CT_TEST=0
CT_SILENT=0
CT_LOGGING=0
CT_FORCE=0
CT_LOGFILE='/dev/null'
CT_LOG_DEFAULT_SCOPE='ctoys'

# Cluser Toys Lib variables

CT_LIB_VERSION="1.0.3"

# default colors

CT_COLOR_DEFAULT='\033[0m'
CT_COLOR_RED='\033[0;31m'
CT_COLOR_BRIGHT_RED='\033[1;31m'
CT_COLOR_YELLOW='\033[0;33m'
CT_COLOR_BRIGHT_YELLOW='\033[1;33m'
CT_COLOR_BLUE='\033[0;34m'
CT_COLOR_BRIGHT_BLUE='\033[1;34m'
CT_COLOR_GREEN='\033[0;32m'
CT_COLOR_BRIGHT_GREEN='\033[1;32m'
CT_COLOR_WHITE='\033[0;37m'
CT_COLOR_BRIGHT_WHITE='\033[1;37m'

# deault ctoys_base.lib colors

CT_COLOR_WARN_DEFAULT="$CT_COLOR_YELLOW"
CT_COLOR_DEBUG_DEFAULT="$CT_COLOR_BLUE"
CT_COLOR_TEXT_DEFAULT="$CT_COLOR_DEFAULT"
CT_COLOR_INFO_DEFAULT="$CT_COLOR_BRIGHT_WHITE"
CT_COLOR_VERBOSE_DEFAULT="$CT_COLOR_GREEN"
CT_COLOR_ERROR_DEFAULT="$CT_COLOR_RED"
CT_COLOR_LOG_DEFAULT="$CT_COLOR_GREEN"
CT_COLOR_EXECUTE_DEFAULT='\033[36m'

# init colors

CT_COLOR_WARN="$CT_COLOR_WARN_DEFAULT"
CT_COLOR_DEBUG="$CT_COLOR_DEBUG_DEFAULT"
CT_COLOR_TEXT="$CT_COLOR_TEXT_DEFAULT"
CT_COLOR_INFO="$CT_COLOR_INFO_DEFAULT"
CT_COLOR_ERROR="$CT_COLOR_ERROR_DEFAULT"
CT_COLOR_VERBOSE="$CT_COLOR_VERBOSE_DEFAULT"
CT_COLOR_LOG="$CT_COLOR_LOG_DEFAULT"
CT_COLOR_EXECUTE="$CT_COLOR_EXECUTE_DEFAULT"

# support functions


## ct_info "info text"

function ct_info {
 if [ $CT_SILENT -eq 0 ] ; then
  echo -e "${CT_COLOR_INFO}$1${CT_COLOR_TEXT}"
 fi
}

## ct_debug "debug message" [debug level]

function ct_debug {
 local tct_debug_level=1
 local tct_debug_message="$1"
 if [ $# -ge 2 ] ; then
  tct_debug_level=$1
  tct_debug_message="$2"
 fi
 if [ $CT_DEBUG -ge $tct_debug_level ] ; then
  if [ $CT_SILENT -eq 0 ] ; then
   echo -e "${CT_COLOR_DEBUG}DEBUG $tct_debug_level:${CT_COLOR_TEXT} $tct_debug_message"
  fi
 fi
}

## ct_verbose "verbose message"

function ct_verbose {
 if [[ $CT_VERBOSE -eq 1 || $CT_DEBUG -ge 1 ]] ; then
  if [ $CT_SILENT -eq 0 ] ; then
   echo -e "${CT_COLOR_VERBOSE}VERBOSE:${CT_COLOR_TEXT} $1"
  fi
 fi
}

## ct_log "log message" ["log scope"]

function ct_log {
 if [ $CT_LOGGING -eq 1 ] ; then
  local tct_log_date=$(${CTT["DATE"]} +%F%t%T)
  local tct_log_scope="$CT_LOG_DEFAULT_SCOPE"
  if [ $# -eq 2 ] ; then
   tct_log_scope="$2"
  fi
  echo -e "$tct_log_date [$tct_log_scope] $1" >> $CT_LOGFILE
  if [[ $CT_VERBOSE -eq 1 || $CT_DEBUG -ge 1 ]] ; then
   if [ $CT_SILENT -eq 0 ] ; then
    echo -e "${CT_COLOR_LOG}LOG $tct_log_scope:${CT_COLOR_TEXT} $1"
   fi
  fi
 fi
}

## ct_warn "warning message"

function ct_warn {
 if [ $CT_SILENT -eq 0 ] ; then
  echo -e "${CT_COLOR_WARN}WARNING:${CT_COLOR_TEXT} $1"
 fi
}

## ct_error "error message"

function ct_error {
 if [ $CT_SILENT -eq 0 ] ; then
  echo -e "${CT_COLOR_ERROR}ERROR:${CT_COLOR_TEXT} $1"
 fi
 if [ $CT_LOGGING -eq 1 ] ; then
  local tct_log_date=$(${CTT["DATE"]} +%F%t%T)
  echo -e "$tct_log_date [$CT_LOG_DEFAULT_SCOPE] ERROR: $1" >> $CT_LOGFILE
 fi
}

## ct_exec "execute string"
# this thing just prints out the execute string

function ct_exec {
 if [[ $CT_VERBOSE -eq 1 || $CT_DEBUG -ge 1 ]] ; then
  if [ $CT_SILENT -eq 0 ] ; then
   echo -e "${CT_COLOR_EXECUTE}EXECUTE:${CT_COLOR_TEXT} $@"
  fi
 fi
}

#function ct_exec {
# if [[ $c_verbose -eq 1 || $c_debug -ge 1 ]] ; then
#  f_info "\033[36mEXECUTE:\033[0m $@"
#  f_debug1 "argCount: $#"
#  for i_arg in $@
#  do
#   f_debug1 "arg: $i_arg"
#  done
# fi
# if [ 0 -eq $c_test ] ; then
#  $@
# fi
#}

## ct_activate_colors [1/0]
# toggle colormode

function ct_activate_colors {
 ct_debug 3 "called: ct_activate_colors $@"
 if [ $1 -eq 1 ] ; then
  CT_COLOR_WARN="$CT_COLOR_WARN_DEFAULT"
  CT_COLOR_DEBUG="$CT_COLOR_DEBUG_DEFAULT"
  CT_COLOR_TEXT="$CT_COLOR_TEXT_DEFAULT"
  CT_COLOR_INFO="$CT_COLOR_INFO_DEFAULT"
  CT_COLOR_ERROR="$CT_COLOR_ERROR_DEFAULT"
  CT_COLOR_VERBOSE="$CT_COLOR_VERBOSE_DEFAULT"
  CT_COLOR_LOG="$CT_COLOR_LOG_DEFAULT"
  CT_COLOR_EXECUTE="$CT_COLOR_EXECUTE_DEFAULT"
  ct_debug "enabled color"
 else
  CT_COLOR_WARN=""
  CT_COLOR_DEBUG=""
  CT_COLOR_TEXT=""
  CT_COLOR_INFO=""
  CT_COLOR_ERROR=""
  CT_COLOR_VERBOSE=""
  CT_COLOR_LOG=""
  CT_COLOR_EXECUTE=""
  ct_debug "disabled color"
 fi
}

function ct_check_tool {
 ct_debug 3 "called: ct_check_tool $@"
 ct_retcode=0
 if ! [[ -x "${CTT[$1]}" ]] ; then
  ct_error "Missing tool ${CTT[$1]} (id:$1). Please install"
  ct_retcode=1
  if [ "$2" = "Required" ] ; then
   exit 1
  fi
 fi
}

function ct_settings {
 ct_debug 3 "called: ct_settings $@"
 # disable logging and silence
 local t_logging=$CT_LOGGING
 local t_silent=$CT_SILENT
 CT_LOGGING=0
 CT_SILENT=0
 ct_info "ClusterToys settings:"
 ct_info "Configuration:"
 ct_info "\tCT_DEBUG=$CT_DEBUG"
 ct_info "\tCT_FORCE=$CT_FORCE"
 ct_info "\tCT_LOG_DEFAULT_SCOPE=$CT_LOG_DEFAULT_SCOPE"
 ct_info "\tCT_LOGFILE=$CT_LOGFILE"
 ct_info "\tCT_LOGGING=$t_logging"
 ct_info "\tCT_SILENT=$t_silent"
 ct_info "\tCT_TEST=$CT_TEST"
 ct_info "\tCT_VERBOSE=$CT_VERBOSE"
 ct_info "Tool definitions:"
 for i_key in "${!CTT[@]}"; do
  CT_SILENT=1
  ct_check_tool $i_key
  CT_SILENT=$t_silent
  local t_found="${CT_COLOR_RED}not found${CT_COLOR_TEXT}"
  if [ $ct_retcode -eq 0 ] ; then
   t_found="${CT_COLOR_GREEN}found${CT_COLOR_TEXT}"
  fi
  ct_info "\tCTT[$i_key] -> ${CTT[$i_key]} $t_found"
 done
 # reset logging and silence
 CT_LOGGING=$t_logging
 CT_SILENT=$t_silent
}

function ct_version {
 ct_info "Version: $CT_APP_NAME $CT_APP_VERSION"
 ct_info "Description: $CT_APP_DESCRIPTION"
 ct_info "CTLib Version: $CT_LIB_VERSION"
}

function ct_trim {
 # do not echo inside
 local t_var=$@
 t_var="${t_var#"${t_var%%[![:space:]]*}"}"
 t_var="${t_var%"${t_var##*[![:space:]]}"}"
 echo -n "$t_var"
}

